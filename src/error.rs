//! Handles errors.

use std::error;
use std::result::Result;
use std::{fmt, fmt::Debug, fmt::Display};

/// Alias for a `Result` returning a `SRDError`.
pub type SRDResult<T> = Result<T, SRDError>;

/// Error type for all kind of errors generated by srd.
#[derive(Debug, Clone, PartialEq)]
pub enum SRDError {
    /// A generic error.
    GenericError,
    /// An error while setting the compendium.
    SetCompendiumError,
    /// Ability score having an invalid value.
    InvalidAbilityScore(u8),
}

impl Display for SRDError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        use SRDError::*;
        match self {
            GenericError => write!(f, "generic error"),
            SetCompendiumError => write!(f, "error while setting the compendium"),
            InvalidAbilityScore(value) => {
                write!(f, "the value {:?} is not valid for an ability score", value)
            }
        }
    }
}

impl error::Error for SRDError {
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {
        None
    }
}
