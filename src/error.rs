//! Handles errors.

use crate::character::class::ClassId;
use crate::rules::SRDRules;
use std::error;
use std::result::Result;
use std::{fmt, fmt::Debug, fmt::Display};
use weasel::character::StatisticId;
use weasel::error::WeaselErrorType;

/// Alias for a `Result` returning a `SRDError`.
pub type SRDResult<T> = Result<T, SRDError>;

/// Error type for all kind of errors generated by srd.
#[derive(Debug, Clone, PartialEq)]
pub enum SRDError {
    /// A generic error.
    GenericError,
    /// An error while setting the compendium.
    SetCompendiumError,
    /// Ability score having an invalid value.
    InvalidAbilityScore(u8),
    /// Invalid character level.
    InvalidLevel(u8),
    /// Incorrect enum variant.
    IncorrectVariant,
    /// Non existing class.
    ClassNotFound(ClassId),
    /// Non existing statistic.
    StatisticNotFound(StatisticId<SRDRules>),
    /// Max level has been reached.
    MaxLevelReached,
    /// An argument is invalid.
    InvalidArgument(String),
    /// Wrapper for a weasel error.
    WeaselError(WeaselErrorType<SRDRules>),
}

impl Display for SRDError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        use SRDError::*;
        match self {
            GenericError => write!(f, "generic error"),
            SetCompendiumError => write!(f, "error while setting the compendium"),
            InvalidAbilityScore(value) => {
                write!(f, "the value {:?} is not valid for an ability score", value)
            }
            InvalidLevel(value) => write!(f, "the value {:?} is not a valid level", value),
            IncorrectVariant => write!(f, "enum has a different variant than expected"),
            ClassNotFound(class) => {
                write!(f, "the class {:?} doesn't exist in the compendium", class)
            }
            StatisticNotFound(id) => write!(f, "statistic with id {:?} not found", id),
            MaxLevelReached => write!(f, "the maximum allowed level has been reached"),
            InvalidArgument(s) => write!(f, "invalid argument: {}", s),
            WeaselError(err) => write!(f, "WeaselError {{{}}}", err),
        }
    }
}

impl error::Error for SRDError {
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {
        None
    }
}

impl From<WeaselErrorType<SRDRules>> for SRDError {
    fn from(err: WeaselErrorType<SRDRules>) -> SRDError {
        SRDError::WeaselError(err)
    }
}
